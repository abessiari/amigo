- hosts: all
  vars:
  - timestamp: "{{ ansible_date_time.iso8601_basic }}"
  vars_files:
  - vars.yaml
  - qos-vars.yaml

  tasks:
  - name: Create config directories
    file:
      path: '{{ stage_dir }}/{{ item }}'
      state: directory
    with_items:
      - proxy-configs 
      - golr-configs
      - amigo-configs

  - name: Check if index archive exists
    stat:
      path: '{{ stage_dir }}/srv-solr-data/index'
    register: index_result

  - name: Create index
    block:
      - name: golr_timestamp.log is unused
        file:
          path: "{{ stage_dir }}/golr_timestamp.log"
          state: absent

      - name: release-archive-doi.json is unused
        file:
          path: "{{ stage_dir }}/release-archive-doi.json"
          state: absent

      - name: Create Solr Index
        shell: |
           docker run --rm \
             -e "GOLR_SOLR_MEMORY={{ GOLR_SOLR_MEMORY }}" \
             -e "GOLR_LOADER_MEMORY={{ GOLR_LOADER_MEMORY }} " \
             -e "GOLR_INPUT_ONTOLOGIES={{ GOLR_INPUT_ONTOLOGIES }} " \
             -e "GOLR_INPUT_GAFS={{ GOLR_INPUT_GAFS }}" \
             -v '{{ stage_dir }}/srv-solr-data:/srv/solr/data'\
             -t geneontology/golr-autoindex
        args:
          executable: /bin/bash
    rescue:
      - name: Remove golr_index directory
        file:
          path: '{{ stage_dir }}/srv-solr-data/index' 
          state: absent

      - name: Failed to download index archive
        command: /bin/false
    when: 
      - CREATE_INDEX
      - not index_result.stat.exists

  - name: Download index ...
    block:
      - name: Get remote golr_timestamp.log 
        get_url:
          url: '{{ golr_timestamp }}'
          dest: "{{ stage_dir }}/golr_timestamp.log"
          timeout: 1000
          force: no

      - name: Get remote release-archive-doi.json
        get_url:
          url: '{{ release_archive_doi }}'
          dest: "{{ stage_dir }}/release-archive-doi.json"
          timeout: 1000
          force: no

      - name: Get remote golr_index archive 
        get_url:
          url: '{{ golr_index_archive_url }}'
          dest: "/tmp/golr_index_{{ timestamp }}.tgz"
        async: 9000
        poll: 0
        register: get_golr_archive
        when: not index_result.stat.exists

      - name: Check on async get_golr_archive task
        async_status:
          jid: "{{ get_golr_archive.ansible_job_id }}"
        register: job_result
        until: job_result.finished
        retries: 90
        delay: 10
        when: not index_result.stat.exists

      - name: Create golr_index directory
        file:
          path: '{{ stage_dir }}/srv-solr-data/index'
          state: directory
        when: not index_result.stat.exists

      - name: Untar index archive 
        shell: |
           tar -I pigz -xvf "/tmp/golr_index_{{ timestamp }}.tgz" -C '{{ stage_dir }}/srv-solr-data/index' \
            || tar -xvf "/tmp/golr_index_{{ timestamp }}.tgz" -C '{{ stage_dir }}/srv-solr-data/index'
        args:
          executable: /bin/bash
        async: 2000
        poll: 0
        register: untar_golr_archive
        when: not index_result.stat.exists

      - name: Check on async untar_golr_archive task
        async_status:
          jid: "{{ untar_golr_archive.ansible_job_id }}"
        register: job_result
        until: job_result.finished
        retries: 200
        delay: 10
        when: not index_result.stat.exists
    rescue:
      - name: Remove golr_index directory
        file:
          path: '{{ stage_dir }}/srv-solr-data/index' 
          state: absent

      - name: Failed to download index archive
        command: /bin/false

    always:
      - name: Remove golr_index archive
        file:
          path: "/tmp/golr_index_{{ timestamp }}.tgz"
          state: absent
    when: not CREATE_INDEX

  - name: install non production docker-compose.yaml and http configs ...
    template:
      src: 'templates/{{ item.file }}'
      dest: '{{ stage_dir }}{{ item.dest }}'
    with_items:
      - { file: 'docker-compose.yaml', dest: '/' }
      - { file: 'amigo.yaml', dest: '/amigo-configs' }
      - { file: '001-inline-amigo.conf', dest: '/amigo-configs' }
      - { file: 'apache2.ports.conf', dest: '/amigo-configs' }
      - { file: 'httpd-vhosts-amigo.conf', dest: '/proxy-configs' }
      - { file: 'httpd-vhosts-golr.conf', dest: '/proxy-configs' }
      - { file: 'java-golr-monit', dest: '/golr-configs' }
      - { file: 'console-capture-golr.xml', dest: '/golr-configs' }
      - { file: 'golr-entrypoint.sh', dest: '/golr-configs' }
      - { file: 'httpd-vhosts-amigo-ssl.conf', dest: '/proxy-configs' }
      - { file: 'httpd-vhosts-golr-ssl.conf', dest: '/proxy-configs' }
    when: not PROD_MODE | bool

  - name: install production docker-compose.yaml and http configs ...
    template:
      src: 'templates/{{ item.file }}'
      dest: '{{ stage_dir }}{{ item.dest }}'
    with_items:
      - { file: '001-inline-amigo.conf', dest: '/amigo-configs' }
      - { file: 'apache2.ports.conf', dest: '/amigo-configs' }
      - { file: 'httpd-vhosts-golr.conf', dest: '/proxy-configs' }
      - { file: 'java-golr-monit', dest: '/golr-configs' }
      - { file: 'console-capture-golr.xml', dest: '/golr-configs' }
      - { file: 'golr-entrypoint.sh', dest: '/golr-configs' }
      - { file: 'docker-compose-production.yaml', dest: '/docker-compose.yaml' }
    when: PROD_MODE | bool

  - name: change mode +x for golr-entrypoint ...
    file:
      path: '{{ stage_dir }}/golr-configs/golr-entrypoint.sh'
      mode: u+x,g+x,o+x

  - name: install https configs ...
    template:
      src: 'templates/{{ item.file }}'
      dest: '{{ stage_dir }}{{ item.dest }}'
    with_items:
      - { file: 'httpd-vhosts-amigo.conf', dest: '/proxy-configs' }
      - { file: 'amigo.yaml', dest: '/amigo-configs' }
    when:
      - PROD_MODE | bool 
      - not USE_SSL | bool 

  - name: install https configs ...
    template:
      src: 'templates/{{ item.file }}'
      dest: '{{ stage_dir }}{{ item.dest }}'
    with_items:
      - { file: 'amigo-ssl.yaml', dest: '/amigo-configs/amigo.yaml' }
      - { file: 'httpd-vhosts-amigo-ssl.conf', dest: '/proxy-configs' }
      - { file: 'httpd-vhosts-amigo-redirect.conf', dest: '/proxy-configs' }
      - { file: 'httpd-vhosts-golr-ssl.conf', dest: '/proxy-configs' }
    when:
      - PROD_MODE | bool 
      - USE_SSL | bool 

  - name: s3cfg is unused. delete it
    file:
      path: "{{ stage_dir }}/proxy-configs/s3cfg"
      state: absent
    when: not USE_S3 | bool

  - name: copy s3cfg
    copy:
      src: "{{ S3_CRED_FILE }}"
      dest: "{{ stage_dir }}/proxy-configs/s3cfg"
    when: USE_S3 | bool

  - name: install qos config from templates directory
    template:
      src: qos.conf
      dest: '{{ stage_dir }}/qos.conf'
    when: USE_QOS | bool

  - name: copy noop qos.conf
    copy:
      src: "files/qos-noop.conf"
      dest: '{{ stage_dir }}/qos.conf'
    when: not USE_QOS | bool

  - name: copy robots.txt
    copy:
      src: "files/robots.txt"
      dest: "{{ stage_dir }}/robots.txt"

  - name: Check if repo exists
    stat:
      path: '{{ repo_dir }}'
    register: repo_dir_result

  - name: Checkout amigo repo
    git:
     repo: '{{ repo }}'
     dest: '{{ repo_dir }}'
     version: '{{ branch }}'
     force: no 
     single_branch: true
    when: 
      - PROD_MODE | bool 
      - not repo_dir_result.stat.exists
